<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>国成杯&amp;polar碎碎念</title>
      <link href="/2024/12/08/guocheng/"/>
      <url>/2024/12/08/guocheng/</url>
      
        <content type="html"><![CDATA[<h1 id="国成杯赛后复盘"><a href="#国成杯赛后复盘" class="headerlink" title="国成杯赛后复盘"></a>国成杯赛后复盘</h1><p>额，总结就是在做 apk 的时候，那半自动化脚本给我搓破防了，而且有点神志不清了，看下文吧…..</p><h2 id="Crush’s-secret"><a href="#Crush’s-secret" class="headerlink" title="Crush’s_secret"></a>Crush’s_secret</h2><p>遇到这种smc我一般都是动调过去，然后按个p重新反编译就行,不多讲了，贴个原生态xxtea脚本吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA -0x61C88647   <span class="comment">//改</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> y, z, sum;</span><br><span class="line"><span class="type">unsigned</span> p, rounds, e;</span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line">y = v[p + <span class="number">1</span>];</span><br><span class="line">z = v[p] += MX;</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = -n;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = rounds * DELTA;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">&#123;</span><br><span class="line">z = v[p - <span class="number">1</span>];</span><br><span class="line">y = v[p] -= MX;</span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">sum -= DELTA;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原数据为：传进去的参数为：</span></span><br><span class="line"><span class="comment">0xbc 0xa5 0xce 0x40-&gt;0x40cea5bc</span></span><br><span class="line"><span class="comment">0xf4 0xb2 0xb2 0xe7-&gt;0xe7b2b2f4</span></span><br><span class="line"><span class="comment">0xa9 0x12 0x9d 0x12-&gt;0x129d12a9</span></span><br><span class="line"><span class="comment">0xae 0x10 0xc8 0x5b-&gt;0x5bc810ae</span></span><br><span class="line"><span class="comment">0x3d 0xd7 0x06 0x1d-&gt;0x1d06d73d</span></span><br><span class="line"><span class="comment">0xdc 0x70 0xf8 0xdc-&gt;0xdcf870dc</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">uint32_t</span> v[<span class="number">12</span>] = &#123;<span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">v[<span class="number">0</span>] = <span class="number">0x5A764F8A</span>;</span><br><span class="line">v[<span class="number">1</span>] = <span class="number">0x5B0DF77</span>;</span><br><span class="line">v[<span class="number">2</span>] = <span class="number">0xF101DF69</span>;</span><br><span class="line">v[<span class="number">3</span>] = <span class="number">0xF9C14EF4</span>;</span><br><span class="line">v[<span class="number">4</span>] = <span class="number">0x27F03590</span>;</span><br><span class="line">v[<span class="number">5</span>] = <span class="number">0x7DF3324F</span>;</span><br><span class="line">v[<span class="number">6</span>] = <span class="number">0x2E322D74</span>;</span><br><span class="line">v[<span class="number">7</span>] = <span class="number">0x8F2A09BC</span>;</span><br><span class="line">v[<span class="number">8</span>] = <span class="number">0xABE2A0D7</span>;</span><br><span class="line">v[<span class="number">9</span>] = <span class="number">0xC2A09FE</span>;</span><br><span class="line">v[<span class="number">10</span>] = <span class="number">0x35892BB2</span>;</span><br><span class="line">v[<span class="number">11</span>] = <span class="number">0x53ABBA12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">密钥为字符串&quot;flag&quot;</span></span><br><span class="line"><span class="comment">十六进制表示为 0x66 0x6c 0x61 0x67</span></span><br><span class="line"><span class="comment">于是传进去的参数要转换成 0x67616c66</span></span><br><span class="line"><span class="comment">由于密钥长度为128位，其余需填充0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>] = &#123;</span><br><span class="line">(<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">0x5201314</span>, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">0x52013140</span>,</span><br><span class="line">(<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">0x5201314</span>, (<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">0x52013140</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span></span><br><span class="line"><span class="type">int</span> n = <span class="keyword">sizeof</span>(v) / <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>);    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;加密前原始数据：0x%x 0x%x\n&quot;, v[0], v[1]);</span></span><br><span class="line"><span class="comment">//btea(v, n, k);</span></span><br><span class="line"><span class="comment">//printf(&quot;加密后的数据：0x%x 0x%x\n&quot;, v[0], v[1]);</span></span><br><span class="line">btea(v, <span class="number">-2</span>, k);     <span class="comment">//这里跟ida的改</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：0x%x 0x%x\n&quot;</span>, v[<span class="number">0</span>], v[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">sizeof</span>(<span class="type">uint32_t</span>) / <span class="keyword">sizeof</span>(<span class="type">uint8_t</span>); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v[i] &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//半自动化</span></span><br></pre></td></tr></table></figure><h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><p>欸，又是被dfs算法卡住的一集</p><p>先讲怎么过username</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:debuggable=&quot;true&quot;</span><br><span class="line">android:extractNativeLibs=&quot;true&quot;</span><br></pre></td></tr></table></figure><p>mt管理器改上，保存，签名不过的话自己签一个就行，然后输入1111111111调试，发现加密后和cyber对比中间两位对调，问题不大</p><p>然后讲后面的passport</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有个makebox,可以调起来来，或者直接嗦ai，记得看一下对比</span><br></pre></td></tr></table></figure><p>然后开始最头疼的一集，给大家看看我的goushi半自动化脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PASSWORD_LENGTH 12</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARRAY_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LENGTH 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TARGET_LENGTH 12</span></span><br><span class="line"><span class="comment">// 字符集的大小</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHARSET_SIZE 62 <span class="comment">// 26 (a-z) + 26 (A-Z) + 1 (_)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义字符集</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> charset[] = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&quot;</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">makebox</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">int</span>* iArr)</span> &#123;</span><br><span class="line">    <span class="comment">// 步骤 1: 初始化 iArr 数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++) &#123;</span><br><span class="line">        iArr[ARRAY_SIZE - <span class="number">1</span> - i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 步骤 2: 对数组每个元素进行 XOR 操作</span></span><br><span class="line">    <span class="type">int</span> strLength = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++) &#123;</span><br><span class="line">        iArr[i] ^= str[i % strLength];  <span class="comment">// 按位异或</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>* arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;c9m1bRmfY5Wk&quot;</span>;  <span class="comment">// 请在此处替换你的字符串</span></span><br><span class="line">    <span class="type">int</span> iArr[ARRAY_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行 Makebox 操作</span></span><br><span class="line">    makebox(str, iArr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    printArray(iArr);</span><br><span class="line">    <span class="type">int</span> iArr2[<span class="number">12</span>];</span><br><span class="line">    <span class="type">int</span> iArr3[] = &#123; <span class="number">352</span>, <span class="number">646</span>, <span class="number">752</span>, <span class="number">882</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">122</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">350</span>, <span class="number">360</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">32</span>; j &lt; <span class="number">128</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="number">86</span>;   <span class="comment">//该</span></span><br><span class="line">        <span class="type">int</span> charAt = j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i3 = <span class="number">0</span>; i3 &lt; <span class="number">32</span>; i3++) &#123;</span><br><span class="line">            <span class="type">int</span> i4 = (((iArr[i] ^ charAt) % <span class="number">5</span>) + <span class="number">5</span>) % <span class="number">5</span>;</span><br><span class="line">            <span class="comment">//printf(&quot;this %d i4 = %d&quot;, i3, i4);</span></span><br><span class="line">            <span class="keyword">if</span> (i4 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//ada = add(iArr, charAt, i);</span></span><br><span class="line">                charAt = ((charAt + iArr[i]) % <span class="number">0x400</span> + <span class="number">0x400</span>) % <span class="number">0x400</span>;</span><br><span class="line">                i = (i + charAt) % <span class="number">0x400</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i4 == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//ada = sub(iArr, charAt, i);</span></span><br><span class="line">                charAt = ((charAt - iArr[i]) % <span class="number">0x400</span> + <span class="number">0x400</span>) % <span class="number">0x400</span>;</span><br><span class="line">                i = (i + charAt) % <span class="number">0x400</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i4 == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">//ada = xorOperation(iArr, charAt, i);</span></span><br><span class="line">                charAt = (iArr[i] ^ charAt) % <span class="number">0x400</span>;</span><br><span class="line">                i = (i + charAt) % <span class="number">0x400</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i4 == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">//ada = shl(charAt, i);</span></span><br><span class="line">                charAt = (charAt &gt;&gt; <span class="number">3</span>) % <span class="number">0x400</span>;</span><br><span class="line">                i = (i + charAt) % <span class="number">0x400</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i4 == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="comment">//ada = shr(charAt, i);</span></span><br><span class="line">                charAt = (charAt &lt;&lt; <span class="number">3</span>) % <span class="number">0x400</span>;</span><br><span class="line">                i = (i + charAt) % <span class="number">0x400</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (charAt == <span class="number">350</span>)  <span class="comment">//该</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, j);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);     <span class="comment">//从这里取新i再在上面改</span></span><br><span class="line">            <span class="comment">//0x7a, 0, 0, 7, 350, 360</span></span><br><span class="line">            <span class="comment">//5f 795 646 _</span></span><br><span class="line">            <span class="comment">// 72 887 752 r</span></span><br><span class="line">            <span class="comment">// 6f 962 882 o</span></span><br><span class="line">            <span class="comment">//75 638 65 u</span></span><br><span class="line">            <span class="comment">//6e 243 0 </span></span><br><span class="line">            <span class="comment">//44 468 0x7a </span></span><br><span class="line">            <span class="comment">//5f 992 0</span></span><br><span class="line">            <span class="comment">//zheli 4d 807 50 46 0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                                                                            </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>欸，所以还得是dfs</p><p>python版，从哈工大师傅的wp偷的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makebox</span>(<span class="params">s</span>):</span><br><span class="line">    iArr = [<span class="number">1023</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">        iArr[i] = iArr[i] ^ <span class="built_in">ord</span>(s[i%<span class="number">12</span>])</span><br><span class="line">    <span class="keyword">return</span> iArr;</span><br><span class="line"></span><br><span class="line">box = makebox(<span class="string">&quot;c9m1bRmfY5Wk&quot;</span>) <span class="comment"># round_and</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">iArr, <span class="built_in">str</span></span>):</span><br><span class="line">    length = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">    iArr2 = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)] </span><br><span class="line">    iArr3 = [<span class="number">352</span>, <span class="number">646</span>, <span class="number">752</span>, <span class="number">882</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">122</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">350</span>, <span class="number">360</span>]</span><br><span class="line">    i = <span class="number">33</span></span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length):</span><br><span class="line">        charAt = <span class="built_in">ord</span>(<span class="built_in">str</span>[i2])</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">32</span>):</span><br><span class="line">            i4 = (iArr[i] ^ charAt) % <span class="number">5</span></span><br><span class="line">            <span class="keyword">if</span> i4 == <span class="number">0</span>:</span><br><span class="line">                charAt = (charAt + iArr[i]) % <span class="number">1024</span></span><br><span class="line">                i = (i + charAt) % <span class="number">1024</span></span><br><span class="line">            <span class="keyword">if</span> i4 == <span class="number">1</span>:</span><br><span class="line">                charAt = (charAt - iArr[i]) % <span class="number">1024</span></span><br><span class="line">                i = (i + charAt) % <span class="number">1024</span></span><br><span class="line">            <span class="keyword">if</span> i4 == <span class="number">2</span>:</span><br><span class="line">                charAt = (charAt ^ iArr[i]) % <span class="number">1024</span></span><br><span class="line">                i = (i + charAt) % <span class="number">1024</span></span><br><span class="line">            <span class="keyword">if</span> i4 == <span class="number">3</span>:</span><br><span class="line">                charAt = (charAt &gt;&gt; <span class="number">3</span>) % <span class="number">1024</span></span><br><span class="line">                i = (i + charAt) % <span class="number">1024</span></span><br><span class="line">            <span class="keyword">if</span> i4 == <span class="number">4</span>:</span><br><span class="line">                charAt = (charAt &lt;&lt; <span class="number">3</span>) % <span class="number">1024</span></span><br><span class="line">                i = (i + charAt) % <span class="number">1024</span></span><br><span class="line">        iArr2[i2] = charAt</span><br><span class="line">    <span class="comment"># print(iArr2)</span></span><br><span class="line">    <span class="comment"># print(iArr3)</span></span><br><span class="line">    <span class="keyword">return</span> iArr2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">dic = string.ascii_letters+<span class="string">&#x27;_&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">iArr3 = [<span class="number">352</span>, <span class="number">646</span>, <span class="number">752</span>, <span class="number">882</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">122</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">350</span>, <span class="number">360</span>]</span><br><span class="line">idx = <span class="number">0</span></span><br><span class="line">ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">idx, ans</span>):</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="built_in">len</span>(iArr3):</span><br><span class="line">        <span class="built_in">print</span>(ans) <span class="comment"># _rounD_we_go</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:  <span class="comment"># 遍历所有可能的字符</span></span><br><span class="line">        res = <span class="built_in">round</span>(box, ans+i) </span><br><span class="line">        <span class="keyword">if</span> res[-<span class="number">1</span>] == iArr3[idx]: <span class="comment">#逐位字符比较</span></span><br><span class="line">            <span class="comment"># print(ans+i)</span></span><br><span class="line">            dfs(idx+<span class="number">1</span>, ans+i)</span><br><span class="line">dfs(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># print(ans)</span></span><br></pre></td></tr></table></figure><p>C语言版，showmaker师傅友情泄露</p><p>欸？他base64脚本也挺好的，全偷了o_0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[] = <span class="string">&quot;c9m1bRmfY5Wk&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> table[] = </span><br><span class="line"><span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">findchar</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (table[i] == c) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 如果没有找到字符，则返回0（虽然按理来说应该不会发生）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *input, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tmp;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span>) &#123;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        a = input[i + <span class="number">1</span>];</span><br><span class="line">        input[i + <span class="number">1</span>] = input[i + <span class="number">2</span>];</span><br><span class="line">        input[i + <span class="number">2</span>] = a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            tmp = findchar(input[i + k]);</span><br><span class="line">            tmp = (tmp &lt;&lt; ((<span class="number">3</span> - k) * <span class="number">6</span>));</span><br><span class="line">            num |= tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">2</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">            a = *((<span class="type">unsigned</span> <span class="type">char</span>*)&amp;num + k);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *input, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tmp, num;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">3</span>) &#123;</span><br><span class="line">        tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line">            num = (input[i + k]);</span><br><span class="line">            tmp += (num &lt;&lt; (<span class="number">8</span> * (<span class="number">2</span> - k)));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            a = (tmp &gt;&gt; ((<span class="number">3</span> - k) * <span class="number">6</span>)) &amp; <span class="number">0x3F</span>;</span><br><span class="line">            a = table[a];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    decrypt(s, <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>dfs.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[<span class="number">0x401</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key[] = <span class="string">&quot;c9m1bRmfY5Wk&quot;</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> input[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">enc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> v7, <span class="type">unsigned</span> <span class="type">int</span>&amp; v4)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v2, op;     <span class="comment">//我累个op</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">32</span>; k++) &#123;</span><br><span class="line">        op = ((s[v4] ^ v7) % <span class="number">5</span> + <span class="number">5</span>) % <span class="number">5</span>;  <span class="comment">// 计算操作类型</span></span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">            v2 = ((v7 + s[v4]) % <span class="number">0x400</span> + <span class="number">0x400</span>) % <span class="number">0x400</span>;</span><br><span class="line">            v4 = (v4 + v2) % <span class="number">0x400</span>;</span><br><span class="line">            v7 = v2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            v2 = ((v7 - s[v4]) % <span class="number">0x400</span> + <span class="number">0x400</span>) % <span class="number">0x400</span>;</span><br><span class="line">            v4 = (v4 + v2) % <span class="number">0x400</span>;</span><br><span class="line">            v7 = v2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            v2 = ((v7 ^ s[v4]) % <span class="number">0x400</span> + <span class="number">0x400</span>) % <span class="number">0x400</span>;</span><br><span class="line">            v4 = (v4 + v2) % <span class="number">0x400</span>;</span><br><span class="line">            v7 = v2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            v2 = (v7 &gt;&gt; <span class="number">3</span>) % <span class="number">0x400</span>;</span><br><span class="line">            v4 = (v4 + v2) % <span class="number">0x400</span>;</span><br><span class="line">            v7 = v2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            v2 = (v7 &lt;&lt; <span class="number">3</span>) % <span class="number">0x400</span>;</span><br><span class="line">            v4 = (v4 + v2) % <span class="number">0x400</span>;</span><br><span class="line">            v7 = v2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密文数组</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> cipher[] = &#123; <span class="number">0x160</span>, <span class="number">646</span>, <span class="number">0x2F0</span>, <span class="number">882</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">0x7A</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">350</span>, <span class="number">360</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tab[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_&quot;</span>;</span><br><span class="line"><span class="type">int</span> cipher_len = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深度优先搜索，递归查找密码</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> index, <span class="type">unsigned</span> <span class="type">int</span> idx, <span class="built_in">string</span> flag)</span> <span class="comment">//idx就是i</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= cipher_len) &#123;</span><br><span class="line">        <span class="comment">// 当找到完整的密码时，打印 flag</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v7, v2;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v4 = idx;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> save_v4 = v4;  <span class="comment">// 保存当前v4值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">53</span>; k++) &#123;</span><br><span class="line">        v4 = save_v4;  <span class="comment">// 每次循环都恢复v4</span></span><br><span class="line">        v7 = tab[k];   <span class="comment">// 取tab数组中的一个字符</span></span><br><span class="line">        v2 = enc(v7, v4);  <span class="comment">// 计算加密结果</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果加密结果和当前密文匹配，则继续递归</span></span><br><span class="line">        <span class="keyword">if</span> (v2 == cipher[index]) &#123;</span><br><span class="line">            flag += <span class="type">char</span>(v7);  <span class="comment">// 将当前字符添加到 flag 中</span></span><br><span class="line">            dfs(index + <span class="number">1</span>, v4, flag);  <span class="comment">// 递归调用</span></span><br><span class="line">            flag.pop_back();  <span class="comment">// 回溯，删除最后一个字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 初始化 s 数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++) &#123;</span><br><span class="line">        s[<span class="number">0x3FF</span> - i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 key 对 s 数组进行异或加密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x400</span>; i++) &#123;</span><br><span class="line">        s[i] ^= key[i % <span class="number">12</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v4 = <span class="number">33</span>;  <span class="comment">// 初始化 v4</span></span><br><span class="line">    <span class="built_in">string</span> flag = <span class="string">&quot;&quot;</span>;      <span class="comment">// 用来存储密码的字符串</span></span><br><span class="line">    dfs(<span class="number">0</span>, v4, flag);      <span class="comment">// 从第一个字符开始深度优先搜索</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>欸，太强了（挠屁股.jpg）</p><h2 id="eazykey"><a href="#eazykey" class="headerlink" title="eazykey"></a>eazykey</h2><p>不会内核，跟着别的师傅的wp复现（</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lilachit.notion.site/2024-Re-Pwn-WP-by-Lilac-2698b2aad54d420dac920fbdee1fb5d4</span><br></pre></td></tr></table></figure><p><img src="/2024/12/08/guocheng/1.png" alt="1"></p><p>找入口，然后找主逻辑</p><h3 id="v11"><a href="#v11" class="headerlink" title="v11"></a>v11</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个函数 sub_180001530 是一个 Windows 驱动程序中的 I/O 请求处理函数，负责处理与 IRP 相关的 I/O 请求。</span><br><span class="line">函数根据 IRP 的不同状态（通过 CurrentLocation 字段来判断）执行不同的操作。</span><br><span class="line">如果 CurrentLocation == 1，表示发生了某种错误，函数会将 IRP 标记为错误状态并完成请求。</span><br><span class="line">如果没有错误，函数会获取设备对象，并将 IRP 传递给驱动程序进行后续处理。</span><br></pre></td></tr></table></figure><p><img src="/2024/12/08/guocheng/1.1.png" alt="1.1"></p><h3 id="v12"><a href="#v12" class="headerlink" title="v12"></a>v12</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sub_180001FF0 是一个处理电源管理和 I/O 请求的函数。它的主要步骤包括：</span><br><span class="line"></span><br><span class="line">确保传入的 a1 和从中提取的指针（v3）都经过对齐检查。</span><br><span class="line">启动一个新的电源 IRP 操作（PoStartNextPowerIrp）。</span><br><span class="line">调用其他辅助函数来处理 IRP（如 sub_180001480）。</span><br><span class="line">将处理后的 IRP 传递给设备驱动程序进行后续操作。</span><br></pre></td></tr></table></figure><p><img src="/2024/12/08/guocheng/1.2.png" alt="1.2"></p><h3 id="v13"><a href="#v13" class="headerlink" title="v13"></a>v13</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sub_18000C5D0：这是一个处理内存对齐的函数。如果某个对象的地址不是合适的对齐，它会处理并调整。</span><br><span class="line"></span><br><span class="line">sub_180001730：这个函数用于处理传入的 IRP，返回与 IRP 相关的某些值或指针。</span><br><span class="line"></span><br><span class="line">sub_180001480：这个函数似乎用于处理 IRP，可能是修改 IRP 的状态或执行特定操作。</span><br><span class="line"></span><br><span class="line">IofCallDriver：将 IRP 传递给驱动程序进行处理，通常用于向下层驱动发送 I/O 请求。</span><br><span class="line"></span><br><span class="line">IoDetachDevice 和 IoDeleteDevice：用于从设备堆栈中分离设备并删除设备对象，通常用于卸载设备。</span><br></pre></td></tr></table></figure><p><img src="/2024/12/08/guocheng/1.3.png" alt="1.3"></p><p>显然，v11因该是个read,比较可疑，其实感觉这里已经可以根据wp猜测这是个键盘驱动了</p><p>一个个点开来看</p><p><img src="/2024/12/08/guocheng/1.4.png" alt="1.4"></p><p>这里有些奇怪的东西</p><p><img src="/2024/12/08/guocheng/1.5.png" alt="1.5"></p><p>那么enter过后一般是不是就要检查了</p><p><img src="/2024/12/08/guocheng/1.6.png" alt="1.6"></p><p>确实，根据字符串提示应该是了</p><p><img src="/2024/12/08/guocheng/1.7.png" alt="1.7"></p><p>很明显就是一个普通的对比，所以再根据墨水✌的wp,应该就是在键盘上敲对应的按键就行了</p><p>可以去这里找按键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://bbs.kanxue.com/thread-270393.htm</span><br></pre></td></tr></table></figure><p>或者问下ai<br><img src="/2024/12/08/guocheng/1.8.png" alt="1.8"></p><p><img src="/2024/12/08/guocheng/1.9.png" alt="1.9"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">键盘按键扫描码 (Hex)扫描码 (Decimal)</span><br><span class="line">Esc0x011</span><br><span class="line">F10x3B59</span><br><span class="line">F20x3C60</span><br><span class="line">F30x3D61</span><br><span class="line">F40x3E62</span><br><span class="line">F50x3F63</span><br><span class="line">F60x4064</span><br><span class="line">F70x4165</span><br><span class="line">F80x4266</span><br><span class="line">F90x4367</span><br><span class="line">F100x4468</span><br><span class="line">F110x5787</span><br><span class="line">F120x5888</span><br><span class="line">Print Screen0x137311</span><br><span class="line">Scroll Lock0x4670</span><br><span class="line">Pause/Break0x145325</span><br><span class="line">~ (Tilde)0x2941</span><br><span class="line">10x022</span><br><span class="line">20x033</span><br><span class="line">30x044</span><br><span class="line">40x055</span><br><span class="line">50x066</span><br><span class="line">60x077</span><br><span class="line">70x088</span><br><span class="line">80x099</span><br><span class="line">90x0A10</span><br><span class="line">00x0B11</span><br><span class="line">- (Minus)0x0C12</span><br><span class="line">= (Equal)0x0D13</span><br><span class="line">Backspace0x0E14</span><br><span class="line">Tab0x0F15</span><br><span class="line">Q0x1016</span><br><span class="line">W0x1117</span><br><span class="line">E0x1218</span><br><span class="line">R0x1319</span><br><span class="line">T0x1420</span><br><span class="line">Y0x1521</span><br><span class="line">U0x1622</span><br><span class="line">I0x1723</span><br><span class="line">O0x1824</span><br><span class="line">P0x1925</span><br><span class="line">[ (Left Bracket)0x1A26</span><br><span class="line">] (Right Bracket)0x1B27</span><br><span class="line">\ (Backslash)0x2B43</span><br><span class="line">Caps Lock0x3A58</span><br><span class="line">A0x1E30</span><br><span class="line">S0x1F31</span><br><span class="line">D0x2032</span><br><span class="line">F0x2133</span><br><span class="line">G0x2234</span><br><span class="line">H0x2335</span><br><span class="line">J0x2436</span><br><span class="line">K0x2537</span><br><span class="line">L0x2638</span><br><span class="line">; (Semicolon)0x2739</span><br><span class="line">&#x27; (Apostrophe)0x2840</span><br><span class="line">Enter0x1C28</span><br><span class="line">Shift (Left)0x2A42</span><br><span class="line">Z0x2C44</span><br><span class="line">X0x2D45</span><br><span class="line">C0x2E46</span><br><span class="line">V0x2F47</span><br><span class="line">B0x3048</span><br><span class="line">N0x3149</span><br><span class="line">M0x3250</span><br><span class="line">, (Comma)0x3351</span><br><span class="line">. (Period)0x3452</span><br><span class="line">/ (Slash)0x3553</span><br><span class="line">Shift (Right)0x3654</span><br><span class="line">Ctrl (Left)0x1D29</span><br><span class="line">Windows (Left)0xE0 0x5B91</span><br><span class="line">Alt (Left)0x3856</span><br><span class="line">Space0x3957</span><br><span class="line">Alt (Right)0xE0 0x3856</span><br><span class="line">Windows (Right)0xE0 0x5C92</span><br><span class="line">Menu0xE0 0x5D93</span><br><span class="line">Ctrl (Right)0xE0 0x1D29</span><br><span class="line">Up Arrow0xE0 0xC8200</span><br><span class="line">Down Arrow0xE0 0xD0208</span><br><span class="line">Left Arrow0xE0 0xCB203</span><br><span class="line">Right Arrow0xE0 0xCD205</span><br><span class="line">Insert0xE0 0x5282</span><br><span class="line">Home0xE0 0x4771</span><br><span class="line">Page Up0xE0 0x4973</span><br><span class="line">Delete0xE0 0x5383</span><br><span class="line">End0xE0 0x4F79</span><br><span class="line">Page Down0xE0 0x5181</span><br><span class="line">Num Lock0xE0 0x4569</span><br><span class="line">/ (Numpad)0xE0 0xB5181</span><br><span class="line">*** (Numpad)**0xE0 0x3755</span><br><span class="line">- (Numpad)0xE0 0x4A74</span><br><span class="line">+ (Numpad)0xE0 0x4E78</span><br><span class="line">Enter (Numpad)0xE0 0x1C28</span><br><span class="line">1 (Numpad)0xE0 0x4F79</span><br><span class="line">2 (Numpad)0xE0 0x5080</span><br><span class="line">3 (Numpad)0xE0 0x5181</span><br><span class="line">4 (Numpad)0xE0 0x4B75</span><br><span class="line">5 (Numpad)0xE0 0x4C76</span><br><span class="line">6 (Numpad)0xE0 0x4D77</span><br><span class="line">7 (Numpad)0xE0 0x4771</span><br><span class="line">8 (Numpad)0xE0 0x4872</span><br><span class="line">**9 (Nump</span><br><span class="line">键盘按键扫描码 (Hex)扫描码 (Decimal)</span><br><span class="line">9 (Numpad)0xE0 0x4973</span><br><span class="line">0 (Numpad)0xE0 0x5080</span><br><span class="line">. (Numpad)0xE0 0x5383</span><br><span class="line">Enter (Numpad)0xE0 0x1C28</span><br><span class="line">特殊功能键</span><br><span class="line">键盘按键扫描码 (Hex)扫描码 (Decimal)</span><br><span class="line">Windows (Left)0xE0 0x5B91</span><br><span class="line">Windows (Right)0xE0 0x5C92</span><br><span class="line">Menu0xE0 0x5D93</span><br><span class="line">Ctrl (Left)0x1D29</span><br><span class="line">Ctrl (Right)0xE0 0x1D29</span><br><span class="line">Alt (Left)0x3856</span><br><span class="line">Alt (Right)0xE0 0x3856</span><br><span class="line">Space0x3957</span><br><span class="line">Escape0x011</span><br></pre></td></tr></table></figure><p>再对应写个脚本就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="number">32</span>,<span class="number">42</span>,<span class="number">11</span>,<span class="number">34</span>,<span class="number">4</span>,<span class="number">45</span>,<span class="number">34</span>,<span class="number">42</span>,<span class="number">46</span>,<span class="number">42</span>, <span class="number">26</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">30</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">32</span> , <span class="number">4</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">46</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">33</span>, <span class="number">27</span>, <span class="number">42</span>]</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="number">0x1E</span>: <span class="string">&quot;A&quot;</span>, <span class="number">0x30</span>: <span class="string">&quot;B&quot;</span>, <span class="number">0x2E</span>: <span class="string">&quot;C&quot;</span>, <span class="number">0x20</span>: <span class="string">&quot;D&quot;</span>, <span class="number">0x12</span>: <span class="string">&quot;E&quot;</span>, <span class="number">0x21</span>: <span class="string">&quot;F&quot;</span>, <span class="number">0x22</span>: <span class="string">&quot;G&quot;</span>, <span class="number">0x23</span>: <span class="string">&quot;H&quot;</span>, <span class="number">0x17</span>: <span class="string">&quot;I&quot;</span>, <span class="number">0x24</span>: <span class="string">&quot;J&quot;</span>, <span class="number">0x25</span>: <span class="string">&quot;K&quot;</span>, <span class="number">0x26</span>: <span class="string">&quot;L&quot;</span>, <span class="number">0x32</span>: <span class="string">&quot;M&quot;</span>, <span class="number">0x31</span>: <span class="string">&quot;N&quot;</span>, <span class="number">0x18</span>: <span class="string">&quot;O&quot;</span>, <span class="number">0x19</span>: <span class="string">&quot;P&quot;</span>, <span class="number">0x10</span>: <span class="string">&quot;Q&quot;</span>, <span class="number">0x13</span>: <span class="string">&quot;R&quot;</span>, <span class="number">0x1F</span>: <span class="string">&quot;S&quot;</span>, <span class="number">0x14</span>: <span class="string">&quot;T&quot;</span>, <span class="number">0x16</span>: <span class="string">&quot;U&quot;</span>, <span class="number">0x2F</span>: <span class="string">&quot;V&quot;</span>, <span class="number">0x11</span>: <span class="string">&quot;W&quot;</span>, <span class="number">0x2D</span>: <span class="string">&quot;X&quot;</span>, <span class="number">0x15</span>: <span class="string">&quot;Y&quot;</span>, <span class="number">0x2C</span>: <span class="string">&quot;Z&quot;</span>, <span class="number">0x02</span>: <span class="string">&quot;1&quot;</span>, <span class="number">0x03</span>: <span class="string">&quot;2&quot;</span>, <span class="number">0x04</span>: <span class="string">&quot;3&quot;</span>, <span class="number">0x05</span>: <span class="string">&quot;4&quot;</span>, <span class="number">0x06</span>: <span class="string">&quot;5&quot;</span>, <span class="number">0x07</span>: <span class="string">&quot;6&quot;</span>, <span class="number">0x08</span>: <span class="string">&quot;7&quot;</span>, <span class="number">0x09</span>: <span class="string">&quot;8&quot;</span>, <span class="number">0x0A</span>: <span class="string">&quot;9&quot;</span>, <span class="number">0x0B</span>: <span class="string">&quot;0&quot;</span>, <span class="number">0x2a</span>: <span class="string">&quot;[shift]&quot;</span>, <span class="number">0xc</span>: <span class="string">&quot;-&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(keys):</span><br><span class="line">    v = keys[i]</span><br><span class="line">    <span class="keyword">if</span> v <span class="keyword">in</span> d:</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(keys) <span class="keyword">and</span> keys[i + <span class="number">1</span>] == <span class="number">0x2a</span>: <span class="comment"># shift</span></span><br><span class="line">            <span class="built_in">print</span>(d[v], end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(d[v].lower(), end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;<span class="built_in">hex</span>(v)&#125;</span>]&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="polar赛后复盘"><a href="#polar赛后复盘" class="headerlink" title="polar赛后复盘"></a>polar赛后复盘</h1><p>本来上次打了就不想再打了，但是还是过来看看有什么有意思的题，每次都让人出乎意料</p><h2 id="o-0"><a href="#o-0" class="headerlink" title="o_0"></a>o_0</h2><p>我以为die没查出来，原来是我眼瞎了</p><p><img src="/2024/12/08/guocheng/2.1.png" alt="2.1"></p><p>Mac 的运行程序 arm 64位</p><p><img src="/2024/12/08/guocheng/2.2.png" alt="2.2"></p><p>好难看啊</p><p>没运行环境，裂开，静态分析一下</p><p><img src="/2024/12/08/guocheng/2.3.png" alt="2.3"></p><p>注意，这里0就是一个函数了，就是判断奇数偶数</p><p><img src="/2024/12/08/guocheng/2.4.png" alt="2.4"></p><p>v30</p><p><img src="/2024/12/08/guocheng/2.5.png" alt="2.5"></p><p>然后就是分析加密流程</p><p><img src="/2024/12/08/guocheng/2.7.png" alt="2.7"></p><p>最后的比较</p><p><img src="/2024/12/08/guocheng/2.6.png" alt="2.6"></p><p>这里学到点新的数组索引方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v4 = (_DWORD *)std::vector&lt;int&gt;::operator[][abi:ne180100](v25, j);</span><br><span class="line">1. std::vector&lt;int&gt;::operator[]</span><br><span class="line">std::vector&lt;int&gt; 是 C++ STL 中的一个模板类，表示存储 int 类型元素的动态数组。</span><br><span class="line">operator[] 是该类的成员函数，用于访问 vector 中指定索引的元素。</span><br><span class="line">通过 operator[] 可以访问该 vector 中指定位置的元素，v25 可能是一个 std::vector&lt;int&gt; 类型的对象，而 j 是索引。</span><br></pre></td></tr></table></figure><h2 id="decipher"><a href="#decipher" class="headerlink" title="decipher"></a>decipher</h2><p>经典3.9以上,这玩意失效了，这次一定要配个好的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 dialogue.pyc</span><br></pre></td></tr></table></figure><p>pycdc,别忘了放哪里了o.o</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F:\re_in_all\pyextra\afe4b-main\pycdc</span><br><span class="line"></span><br><span class="line">pycdc your_file_name.pyc &gt; output_file_name.py</span><br></pre></td></tr></table></figure><p><img src="/2024/12/08/guocheng/3.1.png" alt="3.1"></p><p>看看效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: dialogue.pyc (Python 3.10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Protocol.KDF <span class="keyword">import</span> PBKDF2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key_and_salt</span>(<span class="params">password</span>):</span><br><span class="line">    salt = os.urandom(<span class="number">16</span>)</span><br><span class="line">    key = PBKDF2(password, salt, <span class="number">32</span>, <span class="number">1000000</span>, **(<span class="string">&#x27;dkLen&#x27;</span>, <span class="string">&#x27;count&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> (key, salt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">password, plaintext</span>):</span><br><span class="line">    (key, salt) = generate_key_and_salt(password)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC)</span><br><span class="line">    ciphertext = cipher.encrypt(pad(plaintext.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size))</span><br><span class="line">    encoded_ciphertext = base64.b64encode(salt + cipher.iv + ciphertext).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> encoded_ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_password_file</span>(<span class="params">password, input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        plaintext = f.read()</span><br><span class="line">        <span class="literal">None</span>(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    password = <span class="built_in">input</span>(<span class="string">&#x27;Enter encryption password: &#x27;</span>)</span><br><span class="line">    input_file = <span class="string">&#x27;records.txt&#x27;</span></span><br><span class="line">    output_file = <span class="string">&#x27;en_records.txt&#x27;</span></span><br><span class="line">    encrypt_password_file(password, input_file, output_file)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后要手动改一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> key = PBKDF2(password, salt, 32, 1000000, **(&#x27;dkLen&#x27;, &#x27;count&#x27;))</span><br><span class="line"> 变成</span><br><span class="line">  key = PBKDF2(password, salt, dkLen = 32, count = 1000000, )</span><br><span class="line"># 我记得上次看到盐值也是在polar,不过上次是java,乐</span><br></pre></td></tr></table></figure><p>ai🔒个解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Protocol.KDF <span class="keyword">import</span> PBKDF2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key_and_salt</span>(<span class="params">password, salt</span>):</span><br><span class="line">    <span class="comment"># 使用密码和盐生成密钥</span></span><br><span class="line">    key = PBKDF2(password, salt, <span class="number">32</span>, <span class="number">1000000</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">password, encrypted_text</span>):</span><br><span class="line">    <span class="comment"># 解码 base64 编码的密文</span></span><br><span class="line">    encrypted_data = base64.b64decode(encrypted_text)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取盐、iv 和密文部分</span></span><br><span class="line">    salt = encrypted_data[:<span class="number">16</span>]</span><br><span class="line">    iv = encrypted_data[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line">    ciphertext = encrypted_data[<span class="number">32</span>:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用密码和盐生成密钥</span></span><br><span class="line">    key = generate_key_and_salt(password, salt)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建 AES 解密器</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解密密文并去除填充</span></span><br><span class="line">    decrypted_data = unpad(cipher.decrypt(ciphertext), AES.block_size)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将解密后的数据转换为字符串并返回</span></span><br><span class="line">    <span class="keyword">return</span> decrypted_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_password_file</span>(<span class="params">password, input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        encrypted_text = f.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解密内容</span></span><br><span class="line">    plaintext = decrypt(password, encrypted_text)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将解密后的内容写入输出文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    password = <span class="built_in">input</span>(<span class="string">&#x27;Enter decryption password: &#x27;</span>)</span><br><span class="line">    input_file = <span class="string">&#x27;en_records.txt&#x27;</span></span><br><span class="line">    output_file = <span class="string">&#x27;de.txt&#x27;</span></span><br><span class="line">    decrypt_password_file(password, input_file, output_file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Decryption completed and saved to&#x27;</span>, output_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/12/08/guocheng/3.2.png" alt="3.2"></p><p>额…….</p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida小总结（1）</title>
      <link href="/2024/12/01/frida1/"/>
      <url>/2024/12/01/frida1/</url>
      
        <content type="html"><![CDATA[<p>终于要更新博客了，有点幽默了……</p><p>最近碰到了一个神奇的题目，记录一下感想</p><p>首先，我本来都是习惯用jeb分析apk的，但是后来听不记得哪位师傅说，其实jadx反编译更贴近源代码，而且我发现，原来jadx也是可以完成apk java层动态调试工作的，所以成功转手</p><p>我们可以看一下大致的代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mainactivity</span></span><br><span class="line"><span class="keyword">package</span> com.example.WarmUp;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> androidx.activity.EdgeToEdge;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.core.graphics.Insets;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.OnApplyWindowInsetsListener;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.ViewCompat;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.WindowInsetsCompat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes3.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), <span class="keyword">new</span> <span class="title class_">OnApplyWindowInsetsListener</span>() &#123; <span class="comment">// from class: com.example.WarmUp.MainActivity$$ExternalSyntheticLambda0</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// androidx.core.view.OnApplyWindowInsetsListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> WindowInsetsCompat <span class="title function_">onApplyWindowInsets</span><span class="params">(View view, WindowInsetsCompat windowInsetsCompat)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> MainActivity.lambda$onCreate$<span class="number">0</span>(view, windowInsetsCompat);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">flagInput</span> <span class="operator">=</span> (EditText) findViewById(R.id.flagInput);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">confirmButton</span> <span class="operator">=</span> (Button) findViewById(R.id.confirmButton);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TextView</span> <span class="variable">validationResult</span> <span class="operator">=</span> (TextView) findViewById(R.id.validationResult);</span><br><span class="line">        confirmButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.example.WarmUp.MainActivity$$ExternalSyntheticLambda1</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                MainActivity.<span class="built_in">this</span>.m221lambda$onCreate$<span class="number">1</span>$comexampleWarmUpMainActivity(flagInput, validationResult, view);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: package-private */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="comment">/* synthetic */</span> WindowInsetsCompat lambda$onCreate$<span class="number">0</span>(View v, WindowInsetsCompat insets) &#123;</span><br><span class="line">        <span class="type">Insets</span> <span class="variable">systemBars</span> <span class="operator">=</span> insets.getInsets(WindowInsetsCompat.Type.systemBars());</span><br><span class="line">        v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);</span><br><span class="line">        <span class="keyword">return</span> insets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: package-private */</span></span><br><span class="line">    <span class="comment">/* renamed from: lambda$onCreate$1$com-example-WarmUp-MainActivity  reason: not valid java name */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> m221lambda$onCreate$<span class="number">1</span>$comexampleWarmUpMainActivity(EditText flagInput, TextView validationResult, View v) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputFlag</span> <span class="operator">=</span> flagInput.getText().toString().trim();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (validateFlag(inputFlag)) &#123;</span><br><span class="line">                validationResult.setText(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">                validationResult.setTextColor(getResources().getColor(<span class="number">17170453</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                validationResult.setText(<span class="string">&quot;Wrong! Try Again!&quot;</span>);</span><br><span class="line">                validationResult.setTextColor(getResources().getColor(<span class="number">17170455</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            validationResult.setVisibility(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">validateFlag</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RC4</span> <span class="variable">rc4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RC4</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> rc4.encrypt(data, <span class="string">&quot;咪吗学高手&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeToString(ciphertext.getBytes(), <span class="number">2</span>).equals(<span class="string">&quot;w5dDcHZ9woslI8KBPTNrYjlAwpzDjHgwI8OqeTrCpsOiwoZVCG/DjMOHwp3Dn3BPd8KtDwHDhMOUbQ==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目不难，简单分析就知道是RC4魔改+base64了，</p><p>再看一下RC4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.WarmUp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.tls.CipherSuite;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes3.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RC4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(String plainOrCipherText, String key)</span> &#123;</span><br><span class="line">        Integer[] S = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">256</span>];</span><br><span class="line">        Character[] keySchedul = <span class="keyword">new</span> <span class="title class_">Character</span>[plainOrCipherText.length()];</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ciphertext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        ksa(S, key);</span><br><span class="line">        rpga(S, keySchedul, plainOrCipherText.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; plainOrCipherText.length(); i++) &#123;</span><br><span class="line">            ciphertext.append((<span class="type">char</span>) (plainOrCipherText.charAt(i) ^ keySchedul[i].charValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ciphertext.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ksa</span><span class="params">(Integer[] s, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            s[i] = Integer.valueOf(i ^ CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; <span class="number">256</span>; i2++) &#123;</span><br><span class="line">            j = ((s[i2].intValue() + j) + key.charAt(i2 % key.length())) % <span class="number">256</span>;</span><br><span class="line">            swap(s, i2, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rpga</span><span class="params">(Integer[] s, Character[] keySchedul, <span class="type">int</span> plaintextLength)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; plaintextLength; k++) &#123;</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">            j = (s[i].intValue() + j) % <span class="number">256</span>;</span><br><span class="line">            swap(s, i, j);</span><br><span class="line">            keySchedul[k] = Character.valueOf((<span class="type">char</span>) s[(s[i].intValue() + s[j].intValue()) % <span class="number">256</span>].intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Integer[] s, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">mTemp</span> <span class="operator">=</span> s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = mTemp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单提及一下要用到的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//控制台</span><br><span class="line"></span><br><span class="line">adb devices</span><br><span class="line"></span><br><span class="line">显示offline就</span><br><span class="line">adb reconnect offline</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">ls</span><br><span class="line">./fri......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>frida的几种模式(彩蛋)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先frida启动</span><br><span class="line">frida -U -f com.yyyiggod.cdmmmmmmm</span><br><span class="line"></span><br><span class="line">文件</span><br><span class="line">frida -U -f com.w3333333.sevedy -l .\jjkk.js</span><br><span class="line"></span><br><span class="line">先运行，再启动Frida,用文件名</span><br><span class="line">frida -U &#x27;showmaker&#x27; -l .\linkhash.js</span><br></pre></td></tr></table></figure><h2 id="法一：直接抄，然后解就行"><a href="#法一：直接抄，然后解就行" class="headerlink" title="法一：直接抄，然后解就行"></a>法一：直接抄，然后解就行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RC4</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="variable language_">self</span>.S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        <span class="variable language_">self</span>.key = [<span class="built_in">ord</span>(char) <span class="keyword">for</span> char <span class="keyword">in</span> key]</span><br><span class="line">        <span class="variable language_">self</span>.ksa()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ksa</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Key Scheduling Algorithm (KSA)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="variable language_">self</span>.S[i] = i ^ <span class="number">149</span></span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = (j + <span class="variable language_">self</span>.S[i] + <span class="variable language_">self</span>.key[i % <span class="built_in">len</span>(<span class="variable language_">self</span>.key)]) % <span class="number">256</span></span><br><span class="line">            <span class="variable language_">self</span>.swap(<span class="variable language_">self</span>.S, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rpga</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment"># Pseudo-Random Generation Algorithm (PRGA)</span></span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        keystream = []</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + <span class="variable language_">self</span>.S[i]) % <span class="number">256</span></span><br><span class="line">            <span class="variable language_">self</span>.swap(<span class="variable language_">self</span>.S, i, j)</span><br><span class="line">            keystream.append(<span class="variable language_">self</span>.S[(<span class="variable language_">self</span>.S[i] + <span class="variable language_">self</span>.S[j]) % <span class="number">256</span>])</span><br><span class="line">        <span class="keyword">return</span> keystream</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">self, s, i, j</span>):</span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_decrypt</span>(<span class="params">self, plain_or_cipher_text</span>):</span><br><span class="line">        <span class="comment"># Encrypt or decrypt the data using XOR operation</span></span><br><span class="line">        keystream = <span class="variable language_">self</span>.rpga(plain_or_cipher_text)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain_or_cipher_text)):</span><br><span class="line">            result.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(plain_or_cipher_text[i]) ^ keystream[i]))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 示例: 使用 Base64 编码的密钥进行加解密</span></span><br><span class="line">    encoded_key = <span class="string">&quot;w5dDcHZ9woslI8KBPTNrYjlAwpzDjHgwI8OqeTrCpsOiwoZVCG/DjMOHwp3Dn3BPd8KtDwHDhMOUbQ==&quot;</span></span><br><span class="line">    plain_text = base64.b64decode(encoded_key).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    key = <span class="string">&quot;咪吗学高手&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建 RC4 加密解密实例</span></span><br><span class="line">    rc4 = RC4(key)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加密过程</span></span><br><span class="line">    cipher_text = rc4.encrypt_decrypt(plain_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cipher Text:&quot;</span>, cipher_text)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解密过程</span></span><br><span class="line">    decrypted_text = rc4.encrypt_decrypt(cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted Text:&quot;</span>, decrypted_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>感谢cdm格格送来的脚本</p><h2 id="法二：动态调试"><a href="#法二：动态调试" class="headerlink" title="法二：动态调试"></a>法二：动态调试</h2><p>因为rc4的加密特殊性我们采用输入 111111111111111111111111111111111来直接查看最后结果的方式反推</p><p>不过多赘述了，相同方法参见sctf sbox那题</p><p><img src="/2024/12/01/frida1/1.4.jpg" alt="1.4"></p><p>贴个脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag[] = &#123; <span class="number">0xc2</span>,<span class="number">0x80</span>,<span class="number">0x1e</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x37</span>,<span class="number">0xc3</span>,<span class="number">0x9b</span>,<span class="number">0x22</span>,<span class="number">0x23</span>,<span class="number">0xc2</span>,<span class="number">0x87</span>,<span class="number">0x3a</span>,<span class="number">0x30</span>,<span class="number">0x6e</span>,<span class="number">0x65</span>,<span class="number">0x25</span>,<span class="number">0x48</span>,<span class="number">0xc2</span>,<span class="number">0x9b</span>,<span class="number">0xc3</span>,<span class="number">0x8e</span>,<span class="number">0x2f</span>,<span class="number">0x2c</span>,<span class="number">0x26</span>,<span class="number">0xc2</span>,<span class="number">0xbd</span>,<span class="number">0x7c</span>,<span class="number">0x3c</span>,<span class="number">0xc2</span>,<span class="number">0xba</span>,<span class="number">0xc3</span>,<span class="number">0xaa</span>,<span class="number">0xc3</span>,<span class="number">0x93</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x73</span>,<span class="number">0xc3</span>,<span class="number">0x85</span>,<span class="number">0xc3</span>,<span class="number">0x83</span>,<span class="number">0xc2</span>,<span class="number">0x9d</span>,<span class="number">0xc2</span>,<span class="number">0x88</span>,<span class="number">0x71</span>,<span class="number">0x48</span>,<span class="number">0x76</span>,<span class="number">0xc3</span>,<span class="number">0xbe</span>,<span class="number">0x0a</span>,<span class="number">0x06</span>,<span class="number">0xc2</span>,<span class="number">0x96</span>,<span class="number">0xc3</span>,<span class="number">0x95</span>,<span class="number">0x21</span> &#125;;</span><br><span class="line">    <span class="type">int</span> xxxor[] = &#123; <span class="number">0xc3</span>,<span class="number">0x97</span>,<span class="number">0x43</span>,<span class="number">0x70</span>,<span class="number">0x76</span>,<span class="number">0x7d</span>,<span class="number">0xc2</span>,<span class="number">0x8b</span>,<span class="number">0x25</span>,<span class="number">0x23</span>,<span class="number">0xc2</span>,<span class="number">0x81</span>,<span class="number">0x3d</span>,<span class="number">0x33</span>,<span class="number">0x6b</span>,<span class="number">0x62</span>,<span class="number">0x39</span>,<span class="number">0x40</span>,<span class="number">0xc2</span>,<span class="number">0x9c</span>,<span class="number">0xc3</span>,<span class="number">0x8c</span>,<span class="number">0x78</span>,<span class="number">0x30</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0xaa</span>,<span class="number">0x79</span>,<span class="number">0x3a</span>,<span class="number">0xc2</span>,<span class="number">0xa6</span>,<span class="number">0xc3</span>,<span class="number">0xa2</span>,<span class="number">0xc2</span>,<span class="number">0x86</span>,<span class="number">0x55</span>,<span class="number">0x08</span>,<span class="number">0x6f</span>,<span class="number">0xc3</span>,<span class="number">0x8c</span>,<span class="number">0xc3</span>,<span class="number">0x87</span>,<span class="number">0xc2</span>,<span class="number">0x9d</span>,<span class="number">0xc3</span>,<span class="number">0x9f</span>,<span class="number">0x70</span>,<span class="number">0x4f</span>,<span class="number">0x77</span>,<span class="number">0xc2</span>,<span class="number">0xad</span>,<span class="number">0x0f</span>,<span class="number">0x01</span>,<span class="number">0xc3</span>,<span class="number">0x84</span>,<span class="number">0xc3</span>,<span class="number">0x94</span>,<span class="number">0x6d</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">58</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> a = flag[i] ^ xxxor[i] ^ <span class="number">0x31</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0&amp;lag&#123;0!61176246-91613f-40&amp;471-190$b9-1815110&amp;0600&quot;460#10&#125;</span></span><br></pre></td></tr></table></figure><p>没错，确实有问题，所以我们将使用第二种方法去取更精准的值</p><h2 id="法三-frida-hook取值"><a href="#法三-frida-hook取值" class="headerlink" title="法三: frida_hook取值"></a>法三: frida_hook取值</h2><p>我们要hook rc4加密后的返回结果</p><p><img src="/2024/12/01/frida1/1.4.png" alt="1.4"></p><p>这是很经典的一个hook模板了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">hook2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">MainActivity</span> <span class="operator">=</span> Java.use(<span class="string">&quot;com.example.WarmUp.RC4&quot;</span>);</span><br><span class="line">    MainActivity.encrypt.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = function (a, b) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;Origin i and i2 = &quot;</span>, a, b);</span><br><span class="line">        <span class="type">let</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.encrypt(a, b);</span><br><span class="line">        console.log(<span class="string">&quot;Origin i and i2 = &quot;</span>, result);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.check(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        hook2();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"></span><br><span class="line"><span class="comment">//let RC4 = Java.use(&quot;com.example.WarmUp.RC4&quot;);</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2024/12/01/frida1/1.5.jpg" alt="1.5"></p><p>那么，我们用java转16进制即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">stringToByte</span><span class="params">(str)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ch, st, re = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        ch = str.charCodeAt(i);</span><br><span class="line">        st = [];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            st.push(ch &amp; <span class="number">0xFF</span>);</span><br><span class="line">            ch = ch &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (ch);</span><br><span class="line">        re = re.concat(st.reverse());</span><br><span class="line">    &#125;   <span class="comment">// return an array of bytes  </span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function <span class="title function_">hook2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">MainActivity</span> <span class="operator">=</span> Java.use(<span class="string">&quot;com.example.WarmUp.RC4&quot;</span>);</span><br><span class="line">    MainActivity.encrypt.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = function (a, b) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;Origin i and i2 = &quot;</span>, a, b);</span><br><span class="line">        <span class="type">let</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.encrypt(a, b);   <span class="comment">//打印加密的值</span></span><br><span class="line">        console.log(<span class="string">&quot;Origin i and i2 = &quot;</span>, result);</span><br><span class="line">        <span class="type">let</span> <span class="variable">byteResult</span> <span class="operator">=</span> stringToByte(result);</span><br><span class="line">        console.log(<span class="string">&quot;Result as byte array: &quot;</span>, byteResult);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印字节数组（如果需要）</span></span><br><span class="line">        <span class="comment">//console.log(&quot;Result as byte array: &quot;, byteResult);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        hook2();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::com.example.WarmUp ]-&gt; Origin i and i2 =  1111111111111111111111111111111 咪吗学高手</span><br><span class="line">Origin i and i2 =    7Û&quot;#:0ne%HÎ/,&amp;½|&lt;ºêÓ</span><br><span class="line">Result as byte array:  128,30,32,32,55,219,34,35,135,58,48,110,101,37,72,155,206,47,44,38,189,124,60,186,234,211,6</span><br></pre></td></tr></table></figure><p>没错，成功了，但是转念一想，既然输出多少有点问题，为什么不直接取值然后顺便就异或回去呢，只要脚本写在一起就行</p><p>先看一下怎么用他的导入包函数</p><p><img src="/2024/12/01/frida1/1.6.png" alt="1.6"></p><p><img src="/2024/12/01/frida1/1.7.png" alt="1.7"></p><p>脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function () &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        <span class="comment">// 获取 RC4 类的引用</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">RC4</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> keyIndeed</span><br><span class="line">        <span class="comment">// hook encrypt 方法</span></span><br><span class="line">        RC4.encrypt.implementation = function (plainOrCipherText, key) &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;Calling RC4.encrypt with plainOrCipherText: &#x27;</span> + plainOrCipherText + <span class="string">&#x27;, key: &#x27;</span> + key);</span><br><span class="line">            keyIndeed = key</span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">base64CipherText</span> <span class="operator">=</span> <span class="string">&quot;w5dDcHZ9woslI8KBPTNrYjlAwpzDjHgwI8OqeTrCpsOiwoZVCG/DjMOHwp3Dn3BPd8KtDwHDhMOUbQ==&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">decodedCipherText</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;android.util.Base64&#x27;</span>).decode(base64CipherText, <span class="number">2</span>); <span class="comment">// 2表示URL-safe模式</span></span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">decodedText</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$<span class="keyword">new</span>(decodedCipherText);</span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.encrypt(decodedText, key);</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">&#x27;RC4.encrypt result: &#x27;</span> + result);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回加密结果</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/1.8.png" alt="1.8"></p><p>也确实成功了</p><h2 id="法四：暴力内存搜刮"><a href="#法四：暴力内存搜刮" class="headerlink" title="法四：暴力内存搜刮"></a>法四：暴力内存搜刮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.52pojie.cn/thread-1838539-1-1.html</span><br></pre></td></tr></table></figure><p>有点复杂，具体去看正己师傅的文章</p><p>主要是要换frida环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">mkvirtualenv frida14</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(frida14)pip install frida-tools==9.2.4</span><br><span class="line">//虽然我没搞就是了，报错再说.....</span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.example.saga131 explore</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities -查看内存中加载的activity   /android hooking list services -查看内存中加载的services</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_activity 类名 -启动activity或service(可以用于一些没有验证的activity,在一些简单的ctf中有时候可以出奇效)</span><br><span class="line"></span><br><span class="line">//这个程序比较简单，如果复杂的话可以使用类的搜索</span><br><span class="line">android hooking search classes +</span><br><span class="line">//android hooking search classes example</span><br></pre></td></tr></table></figure><p>首先我们需要一个hashcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">com.example.WarmUp on (google: 10) [usb] # android heap search instances com.example.WarmUp.MainActivity</span><br><span class="line">Class instance enumeration complete for com.example.WarmUp.MainActivity</span><br><span class="line">Hashcode  Class                            toString()</span><br><span class="line">--------  -------------------------------  ---------------------------------------</span><br><span class="line">22710814  com.example.WarmUp.MainActivity  com.example.WarmUp.MainActivity@15a8a1e</span><br><span class="line">11745467  com.example.WarmUp.MainActivity  com.example.WarmUp.MainActivity@b338bb</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/1.9.png" alt="1.9"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android heap execute &lt;handle&gt; getPublicInt(实例的hashcode+方法名)   //这里要求无参数，待会再找个无参数demo实验</span><br><span class="line"></span><br><span class="line">如果是带参数的方法，则需要进入编辑器环境  </span><br><span class="line">android heap evaluate &lt;handle&gt;  </span><br><span class="line">console.log(clazz.a(&quot;吾爱破解&quot;));</span><br><span class="line"></span><br><span class="line">//console.log(clazz.validateFlag(&quot;11111111111111111111&quot;))</span><br><span class="line">按住esc+enter触发</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/2.0.png" alt="2.0"></p><p><img src="/2024/12/01/frida1/2.1.png" alt="2.1"></p><p>当然，还能用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list class_methods com.example.WarmUp.MainActivity 类名 -内存漫游类中的所有方法</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/2.2.png" alt="2.2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method 类名.方法名 --dump-args --dump-return --dump-backtrace</span><br><span class="line">//android hooking watch class_method com.example.WarmUp.MainActivity.validateF</span><br><span class="line">lag --dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/2.3.png" alt="2.3"></p><h3 id="开始正题"><a href="#开始正题" class="headerlink" title="开始正题"></a>开始正题</h3><p>所实话，感觉有点像java层模拟执行</p><p>有个问题，就是你会发现他搜不到这个RC4类，可以给大家看一下我之前的内存寻找结果</p><p><img src="/2024/12/01/frida1/2.5.png" alt="2.5"></p><p>所以，我们得多点几下check,让他抓到，再人为搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.example.WarmUp on (google: 10) [usb] # android hooking search classes RC4</span><br><span class="line">Note that Java classes are only loaded when they are used, so if the expected class has not been found, it might not have been loaded yet.</span><br><span class="line">com.android.org.bouncycastle.jcajce.provider.symmetric.ARC4</span><br><span class="line">com.android.org.bouncycastle.jcajce.provider.symmetric.ARC4$Mappings</span><br><span class="line">com.example.WarmUp.RC4</span><br></pre></td></tr></table></figure><p>找个hashcode先</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.example.WarmUp on (google: 10) [usb] # android heap search instances com.example.WarmUp.RC4</span><br><span class="line">Class instance enumeration complete for com.example.WarmUp.RC4</span><br><span class="line"> Hashcode  Class                   toString()</span><br><span class="line">---------  ----------------------  ------------------------------</span><br><span class="line">108025448  com.example.WarmUp.RC4  com.example.WarmUp.RC4@6705668</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/2.4.png" alt="2.4"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.example.WarmUp on (google: 10) [usb] # android heap evaluate 108025448</span><br><span class="line">(The hashcode at `108025448` will be available as the `clazz` variable.)</span><br><span class="line">console.log(clazz.encrypt(&quot;11111111111111111111111111111111111&quot;, &quot;咪吗学高手&quot;))</span><br><span class="line">JavaScript capture complete. Evaluating...</span><br><span class="line">Handle 108025448 is to class</span><br><span class="line">        com.example.WarmUp.RC4</span><br><span class="line">  7Û&quot;#:0ne%HÎ/,&amp;½|&lt;ºêÓ</span><br></pre></td></tr></table></figure><p>额，没区别啊，…….,感觉得想个办法，最好使用16进制的格式输出</p><p>不过找到了objection其他好玩的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.anquanke.com/post/id/197657</span><br></pre></td></tr></table></figure><p>有个辅助写frida的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking generate simple com.example.WarmUp.RC4</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">    clazz.swap.implementation = function() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz.swap.apply(<span class="built_in">this</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">    clazz.rpga.implementation = function() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz.rpga.apply(<span class="built_in">this</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">    clazz.ksa.implementation = function() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz.ksa.apply(<span class="built_in">this</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">    clazz.encrypt.implementation = function() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz.encrypt.apply(<span class="built_in">this</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//还行，自己在修改一下</span></span><br></pre></td></tr></table></figure><h1 id="必要的知识掌握"><a href="#必要的知识掌握" class="headerlink" title="必要的知识掌握"></a>必要的知识掌握</h1><p>有个超级好看的文章，建议都去学一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.52pojie.cn/thread-742686-1-1.html</span><br></pre></td></tr></table></figure><p>先加个debuggable再找一下入口函数</p><p><img src="/2024/12/01/frida1/1.3.png" alt="1.3"></p><h1 id="小插件"><a href="#小插件" class="headerlink" title="小插件"></a>小插件</h1><p>可以帮助分析so层的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Pr0214/trace_natives</span><br></pre></td></tr></table></figure><p>大家真可以去下下这个，好有意思的小.py文件</p><h1 id="frida检测绕过"><a href="#frida检测绕过" class="headerlink" title="frida检测绕过"></a>frida检测绕过</h1><p><a href="https://github.com/Ylarod/Florida">GitHub - Ylarod&#x2F;Florida: 基础反检测 frida-server &#x2F; Basic anti-detection frida-server</a></p><p>download</p><p><img src="/2024/12/01/frida1/1.1.png" alt="1.1"></p><p>下载16.5.6这个</p><p><img src="/2024/12/01/frida1/1.2.png" alt="1.2"></p><p>然后用法和frida一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.jjkk.showmaker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/10/hello-world/"/>
      <url>/2024/11/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="我服了，老是不记得那些指令，放这下次用"><a href="#我服了，老是不记得那些指令，放这下次用" class="headerlink" title="我服了，老是不记得那些指令，放这下次用"></a>我服了，老是不记得那些指令，放这下次用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后发博客的话,source _posts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
