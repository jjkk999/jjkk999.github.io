<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>frida小总结（1）</title>
      <link href="/2024/12/01/frida1/"/>
      <url>/2024/12/01/frida1/</url>
      
        <content type="html"><![CDATA[<p>终于要更新博客了，有点幽默了……</p><p>最近碰到了一个神奇的题目，记录一下感想</p><p>首先，我本来都是习惯用jeb分析apk的，但是后来听不记得哪位师傅说，其实jadx反编译更贴近源代码，而且我发现，原来jadx也是可以完成apk java层动态调试工作的，所以成功转手</p><p>我们可以看一下大致的代码逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mainactivity</span></span><br><span class="line"><span class="keyword">package</span> com.example.WarmUp;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> androidx.activity.EdgeToEdge;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.core.graphics.Insets;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.OnApplyWindowInsetsListener;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.ViewCompat;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.WindowInsetsCompat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes3.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), <span class="keyword">new</span> <span class="title class_">OnApplyWindowInsetsListener</span>() &#123; <span class="comment">// from class: com.example.WarmUp.MainActivity$$ExternalSyntheticLambda0</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// androidx.core.view.OnApplyWindowInsetsListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> WindowInsetsCompat <span class="title function_">onApplyWindowInsets</span><span class="params">(View view, WindowInsetsCompat windowInsetsCompat)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> MainActivity.lambda$onCreate$<span class="number">0</span>(view, windowInsetsCompat);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">flagInput</span> <span class="operator">=</span> (EditText) findViewById(R.id.flagInput);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">confirmButton</span> <span class="operator">=</span> (Button) findViewById(R.id.confirmButton);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TextView</span> <span class="variable">validationResult</span> <span class="operator">=</span> (TextView) findViewById(R.id.validationResult);</span><br><span class="line">        confirmButton.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123; <span class="comment">// from class: com.example.WarmUp.MainActivity$$ExternalSyntheticLambda1</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// android.view.View.OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                MainActivity.<span class="built_in">this</span>.m221lambda$onCreate$<span class="number">1</span>$comexampleWarmUpMainActivity(flagInput, validationResult, view);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: package-private */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="comment">/* synthetic */</span> WindowInsetsCompat lambda$onCreate$<span class="number">0</span>(View v, WindowInsetsCompat insets) &#123;</span><br><span class="line">        <span class="type">Insets</span> <span class="variable">systemBars</span> <span class="operator">=</span> insets.getInsets(WindowInsetsCompat.Type.systemBars());</span><br><span class="line">        v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);</span><br><span class="line">        <span class="keyword">return</span> insets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: package-private */</span></span><br><span class="line">    <span class="comment">/* renamed from: lambda$onCreate$1$com-example-WarmUp-MainActivity  reason: not valid java name */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> m221lambda$onCreate$<span class="number">1</span>$comexampleWarmUpMainActivity(EditText flagInput, TextView validationResult, View v) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputFlag</span> <span class="operator">=</span> flagInput.getText().toString().trim();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (validateFlag(inputFlag)) &#123;</span><br><span class="line">                validationResult.setText(<span class="string">&quot;Correct!&quot;</span>);</span><br><span class="line">                validationResult.setTextColor(getResources().getColor(<span class="number">17170453</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                validationResult.setText(<span class="string">&quot;Wrong! Try Again!&quot;</span>);</span><br><span class="line">                validationResult.setTextColor(getResources().getColor(<span class="number">17170455</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            validationResult.setVisibility(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">validateFlag</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RC4</span> <span class="variable">rc4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RC4</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> rc4.encrypt(data, <span class="string">&quot;咪吗学高手&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeToString(ciphertext.getBytes(), <span class="number">2</span>).equals(<span class="string">&quot;w5dDcHZ9woslI8KBPTNrYjlAwpzDjHgwI8OqeTrCpsOiwoZVCG/DjMOHwp3Dn3BPd8KtDwHDhMOUbQ==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目不难，简单分析就知道是RC4魔改+base64了，</p><p>再看一下RC4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.WarmUp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.crypto.tls.CipherSuite;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: classes3.dex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RC4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">(String plainOrCipherText, String key)</span> &#123;</span><br><span class="line">        Integer[] S = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">256</span>];</span><br><span class="line">        Character[] keySchedul = <span class="keyword">new</span> <span class="title class_">Character</span>[plainOrCipherText.length()];</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ciphertext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        ksa(S, key);</span><br><span class="line">        rpga(S, keySchedul, plainOrCipherText.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; plainOrCipherText.length(); i++) &#123;</span><br><span class="line">            ciphertext.append((<span class="type">char</span>) (plainOrCipherText.charAt(i) ^ keySchedul[i].charValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ciphertext.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ksa</span><span class="params">(Integer[] s, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            s[i] = Integer.valueOf(i ^ CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; <span class="number">256</span>; i2++) &#123;</span><br><span class="line">            j = ((s[i2].intValue() + j) + key.charAt(i2 % key.length())) % <span class="number">256</span>;</span><br><span class="line">            swap(s, i2, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rpga</span><span class="params">(Integer[] s, Character[] keySchedul, <span class="type">int</span> plaintextLength)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; plaintextLength; k++) &#123;</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">            j = (s[i].intValue() + j) % <span class="number">256</span>;</span><br><span class="line">            swap(s, i, j);</span><br><span class="line">            keySchedul[k] = Character.valueOf((<span class="type">char</span>) s[(s[i].intValue() + s[j].intValue()) % <span class="number">256</span>].intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Integer[] s, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">mTemp</span> <span class="operator">=</span> s[i];</span><br><span class="line">        s[i] = s[j];</span><br><span class="line">        s[j] = mTemp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单提及一下要用到的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//控制台</span><br><span class="line"></span><br><span class="line">adb devices</span><br><span class="line"></span><br><span class="line">显示offline就</span><br><span class="line">adb reconnect offline</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">ls</span><br><span class="line">./fri......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>frida的几种模式(彩蛋)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先frida启动</span><br><span class="line">frida -U -f com.yyyiggod.cdmmmmmmm</span><br><span class="line"></span><br><span class="line">文件</span><br><span class="line">frida -U -f com.w3333333.sevedy -l .\jjkk.js</span><br><span class="line"></span><br><span class="line">先运行，再启动Frida,用文件名</span><br><span class="line">frida -U &#x27;showmaker&#x27; -l .\linkhash.js</span><br></pre></td></tr></table></figure><h2 id="法一：直接抄，然后解就行"><a href="#法一：直接抄，然后解就行" class="headerlink" title="法一：直接抄，然后解就行"></a>法一：直接抄，然后解就行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RC4</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="variable language_">self</span>.S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">        <span class="variable language_">self</span>.key = [<span class="built_in">ord</span>(char) <span class="keyword">for</span> char <span class="keyword">in</span> key]</span><br><span class="line">        <span class="variable language_">self</span>.ksa()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ksa</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Key Scheduling Algorithm (KSA)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            <span class="variable language_">self</span>.S[i] = i ^ <span class="number">149</span></span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = (j + <span class="variable language_">self</span>.S[i] + <span class="variable language_">self</span>.key[i % <span class="built_in">len</span>(<span class="variable language_">self</span>.key)]) % <span class="number">256</span></span><br><span class="line">            <span class="variable language_">self</span>.swap(<span class="variable language_">self</span>.S, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rpga</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="comment"># Pseudo-Random Generation Algorithm (PRGA)</span></span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        keystream = []</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + <span class="variable language_">self</span>.S[i]) % <span class="number">256</span></span><br><span class="line">            <span class="variable language_">self</span>.swap(<span class="variable language_">self</span>.S, i, j)</span><br><span class="line">            keystream.append(<span class="variable language_">self</span>.S[(<span class="variable language_">self</span>.S[i] + <span class="variable language_">self</span>.S[j]) % <span class="number">256</span>])</span><br><span class="line">        <span class="keyword">return</span> keystream</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">self, s, i, j</span>):</span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_decrypt</span>(<span class="params">self, plain_or_cipher_text</span>):</span><br><span class="line">        <span class="comment"># Encrypt or decrypt the data using XOR operation</span></span><br><span class="line">        keystream = <span class="variable language_">self</span>.rpga(plain_or_cipher_text)</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain_or_cipher_text)):</span><br><span class="line">            result.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(plain_or_cipher_text[i]) ^ keystream[i]))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 示例: 使用 Base64 编码的密钥进行加解密</span></span><br><span class="line">    encoded_key = <span class="string">&quot;w5dDcHZ9woslI8KBPTNrYjlAwpzDjHgwI8OqeTrCpsOiwoZVCG/DjMOHwp3Dn3BPd8KtDwHDhMOUbQ==&quot;</span></span><br><span class="line">    plain_text = base64.b64decode(encoded_key).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    key = <span class="string">&quot;咪吗学高手&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建 RC4 加密解密实例</span></span><br><span class="line">    rc4 = RC4(key)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加密过程</span></span><br><span class="line">    cipher_text = rc4.encrypt_decrypt(plain_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Cipher Text:&quot;</span>, cipher_text)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解密过程</span></span><br><span class="line">    decrypted_text = rc4.encrypt_decrypt(cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted Text:&quot;</span>, decrypted_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>感谢cdm格格送来的脚本</p><h2 id="法二：动态调试"><a href="#法二：动态调试" class="headerlink" title="法二：动态调试"></a>法二：动态调试</h2><p>因为rc4的加密特殊性我们采用输入 111111111111111111111111111111111来直接查看最后结果的方式反推</p><p>不过多赘述了，相同方法参见sctf sbox那题</p><p><img src="/2024/12/01/frida1/1.4.jpg" alt="1.4"></p><p>贴个脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag[] = &#123; <span class="number">0xc2</span>,<span class="number">0x80</span>,<span class="number">0x1e</span>,<span class="number">0x20</span>,<span class="number">0x20</span>,<span class="number">0x37</span>,<span class="number">0xc3</span>,<span class="number">0x9b</span>,<span class="number">0x22</span>,<span class="number">0x23</span>,<span class="number">0xc2</span>,<span class="number">0x87</span>,<span class="number">0x3a</span>,<span class="number">0x30</span>,<span class="number">0x6e</span>,<span class="number">0x65</span>,<span class="number">0x25</span>,<span class="number">0x48</span>,<span class="number">0xc2</span>,<span class="number">0x9b</span>,<span class="number">0xc3</span>,<span class="number">0x8e</span>,<span class="number">0x2f</span>,<span class="number">0x2c</span>,<span class="number">0x26</span>,<span class="number">0xc2</span>,<span class="number">0xbd</span>,<span class="number">0x7c</span>,<span class="number">0x3c</span>,<span class="number">0xc2</span>,<span class="number">0xba</span>,<span class="number">0xc3</span>,<span class="number">0xaa</span>,<span class="number">0xc3</span>,<span class="number">0x93</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x73</span>,<span class="number">0xc3</span>,<span class="number">0x85</span>,<span class="number">0xc3</span>,<span class="number">0x83</span>,<span class="number">0xc2</span>,<span class="number">0x9d</span>,<span class="number">0xc2</span>,<span class="number">0x88</span>,<span class="number">0x71</span>,<span class="number">0x48</span>,<span class="number">0x76</span>,<span class="number">0xc3</span>,<span class="number">0xbe</span>,<span class="number">0x0a</span>,<span class="number">0x06</span>,<span class="number">0xc2</span>,<span class="number">0x96</span>,<span class="number">0xc3</span>,<span class="number">0x95</span>,<span class="number">0x21</span> &#125;;</span><br><span class="line">    <span class="type">int</span> xxxor[] = &#123; <span class="number">0xc3</span>,<span class="number">0x97</span>,<span class="number">0x43</span>,<span class="number">0x70</span>,<span class="number">0x76</span>,<span class="number">0x7d</span>,<span class="number">0xc2</span>,<span class="number">0x8b</span>,<span class="number">0x25</span>,<span class="number">0x23</span>,<span class="number">0xc2</span>,<span class="number">0x81</span>,<span class="number">0x3d</span>,<span class="number">0x33</span>,<span class="number">0x6b</span>,<span class="number">0x62</span>,<span class="number">0x39</span>,<span class="number">0x40</span>,<span class="number">0xc2</span>,<span class="number">0x9c</span>,<span class="number">0xc3</span>,<span class="number">0x8c</span>,<span class="number">0x78</span>,<span class="number">0x30</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0xaa</span>,<span class="number">0x79</span>,<span class="number">0x3a</span>,<span class="number">0xc2</span>,<span class="number">0xa6</span>,<span class="number">0xc3</span>,<span class="number">0xa2</span>,<span class="number">0xc2</span>,<span class="number">0x86</span>,<span class="number">0x55</span>,<span class="number">0x08</span>,<span class="number">0x6f</span>,<span class="number">0xc3</span>,<span class="number">0x8c</span>,<span class="number">0xc3</span>,<span class="number">0x87</span>,<span class="number">0xc2</span>,<span class="number">0x9d</span>,<span class="number">0xc3</span>,<span class="number">0x9f</span>,<span class="number">0x70</span>,<span class="number">0x4f</span>,<span class="number">0x77</span>,<span class="number">0xc2</span>,<span class="number">0xad</span>,<span class="number">0x0f</span>,<span class="number">0x01</span>,<span class="number">0xc3</span>,<span class="number">0x84</span>,<span class="number">0xc3</span>,<span class="number">0x94</span>,<span class="number">0x6d</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">58</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> a = flag[i] ^ xxxor[i] ^ <span class="number">0x31</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0&amp;lag&#123;0!61176246-91613f-40&amp;471-190$b9-1815110&amp;0600&quot;460#10&#125;</span></span><br></pre></td></tr></table></figure><p>没错，确实有问题，所以我们将使用第二种方法去取更精准的值</p><h2 id="法三-frida-hook取值"><a href="#法三-frida-hook取值" class="headerlink" title="法三: frida_hook取值"></a>法三: frida_hook取值</h2><p>我们要hook rc4加密后的返回结果</p><p><img src="/2024/12/01/frida1/1.4.png" alt="1.4"></p><p>这是很经典的一个hook模板了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">hook2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">MainActivity</span> <span class="operator">=</span> Java.use(<span class="string">&quot;com.example.WarmUp.RC4&quot;</span>);</span><br><span class="line">    MainActivity.encrypt.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = function (a, b) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;Origin i and i2 = &quot;</span>, a, b);</span><br><span class="line">        <span class="type">let</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.encrypt(a, b);</span><br><span class="line">        console.log(<span class="string">&quot;Origin i and i2 = &quot;</span>, result);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.check(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        hook2();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"></span><br><span class="line"><span class="comment">//let RC4 = Java.use(&quot;com.example.WarmUp.RC4&quot;);</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2024/12/01/frida1/1.5.jpg" alt="1.5"></p><p>那么，我们用java转16进制即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">stringToByte</span><span class="params">(str)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ch, st, re = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        ch = str.charCodeAt(i);</span><br><span class="line">        st = [];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            st.push(ch &amp; <span class="number">0xFF</span>);</span><br><span class="line">            ch = ch &gt;&gt; <span class="number">8</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (ch);</span><br><span class="line">        re = re.concat(st.reverse());</span><br><span class="line">    &#125;   <span class="comment">// return an array of bytes  </span></span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function <span class="title function_">hook2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">MainActivity</span> <span class="operator">=</span> Java.use(<span class="string">&quot;com.example.WarmUp.RC4&quot;</span>);</span><br><span class="line">    MainActivity.encrypt.overload(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).implementation = function (a, b) &#123;</span><br><span class="line">        console.log(<span class="string">&quot;Origin i and i2 = &quot;</span>, a, b);</span><br><span class="line">        <span class="type">let</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.encrypt(a, b);   <span class="comment">//打印加密的值</span></span><br><span class="line">        console.log(<span class="string">&quot;Origin i and i2 = &quot;</span>, result);</span><br><span class="line">        <span class="type">let</span> <span class="variable">byteResult</span> <span class="operator">=</span> stringToByte(result);</span><br><span class="line">        console.log(<span class="string">&quot;Result as byte array: &quot;</span>, byteResult);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印字节数组（如果需要）</span></span><br><span class="line">        <span class="comment">//console.log(&quot;Result as byte array: &quot;, byteResult);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        hook2();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Pixel 4::com.example.WarmUp ]-&gt; Origin i and i2 =  1111111111111111111111111111111 咪吗学高手</span><br><span class="line">Origin i and i2 =    7Û&quot;#:0ne%HÎ/,&amp;½|&lt;ºêÓ</span><br><span class="line">Result as byte array:  128,30,32,32,55,219,34,35,135,58,48,110,101,37,72,155,206,47,44,38,189,124,60,186,234,211,6</span><br></pre></td></tr></table></figure><p>没错，成功了，但是转念一想，既然输出多少有点问题，为什么不直接取值然后顺便就异或回去呢，只要脚本写在一起就行</p><p>先看一下怎么用他的导入包函数</p><p><img src="/2024/12/01/frida1/1.6.png" alt="1.6"></p><p><img src="/2024/12/01/frida1/1.7.png" alt="1.7"></p><p>脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">setImmediate(function () &#123;</span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line">        <span class="comment">// 获取 RC4 类的引用</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">RC4</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> keyIndeed</span><br><span class="line">        <span class="comment">// hook encrypt 方法</span></span><br><span class="line">        RC4.encrypt.implementation = function (plainOrCipherText, key) &#123;</span><br><span class="line">            console.log(<span class="string">&#x27;Calling RC4.encrypt with plainOrCipherText: &#x27;</span> + plainOrCipherText + <span class="string">&#x27;, key: &#x27;</span> + key);</span><br><span class="line">            keyIndeed = key</span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">base64CipherText</span> <span class="operator">=</span> <span class="string">&quot;w5dDcHZ9woslI8KBPTNrYjlAwpzDjHgwI8OqeTrCpsOiwoZVCG/DjMOHwp3Dn3BPd8KtDwHDhMOUbQ==&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">decodedCipherText</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;android.util.Base64&#x27;</span>).decode(base64CipherText, <span class="number">2</span>); <span class="comment">// 2表示URL-safe模式</span></span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">decodedText</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;java.lang.String&#x27;</span>).$<span class="keyword">new</span>(decodedCipherText);</span><br><span class="line"></span><br><span class="line">            <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.encrypt(decodedText, key);</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">&#x27;RC4.encrypt result: &#x27;</span> + result);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回加密结果</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/1.8.png" alt="1.8"></p><p>也确实成功了</p><h2 id="法四：暴力内存搜刮"><a href="#法四：暴力内存搜刮" class="headerlink" title="法四：暴力内存搜刮"></a>法四：暴力内存搜刮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.52pojie.cn/thread-1838539-1-1.html</span><br></pre></td></tr></table></figure><p>有点复杂，具体去看正己师傅的文章</p><p>主要是要换frida环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">mkvirtualenv frida14</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(frida14)pip install frida-tools==9.2.4</span><br><span class="line">//虽然我没搞就是了，报错再说.....</span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.example.saga131 explore</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities -查看内存中加载的activity   /android hooking list services -查看内存中加载的services</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_activity 类名 -启动activity或service(可以用于一些没有验证的activity,在一些简单的ctf中有时候可以出奇效)</span><br><span class="line"></span><br><span class="line">//这个程序比较简单，如果复杂的话可以使用类的搜索</span><br><span class="line">android hooking search classes +</span><br><span class="line">//android hooking search classes example</span><br></pre></td></tr></table></figure><p>首先我们需要一个hashcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">com.example.WarmUp on (google: 10) [usb] # android heap search instances com.example.WarmUp.MainActivity</span><br><span class="line">Class instance enumeration complete for com.example.WarmUp.MainActivity</span><br><span class="line">Hashcode  Class                            toString()</span><br><span class="line">--------  -------------------------------  ---------------------------------------</span><br><span class="line">22710814  com.example.WarmUp.MainActivity  com.example.WarmUp.MainActivity@15a8a1e</span><br><span class="line">11745467  com.example.WarmUp.MainActivity  com.example.WarmUp.MainActivity@b338bb</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/1.9.png" alt="1.9"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android heap execute &lt;handle&gt; getPublicInt(实例的hashcode+方法名)   //这里要求无参数，待会再找个无参数demo实验</span><br><span class="line"></span><br><span class="line">如果是带参数的方法，则需要进入编辑器环境  </span><br><span class="line">android heap evaluate &lt;handle&gt;  </span><br><span class="line">console.log(clazz.a(&quot;吾爱破解&quot;));</span><br><span class="line"></span><br><span class="line">//console.log(clazz.validateFlag(&quot;11111111111111111111&quot;))</span><br><span class="line">按住esc+enter触发</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/2.0.png" alt="2.0"></p><p><img src="/2024/12/01/frida1/2.1.png" alt="2.1"></p><p>当然，还能用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list class_methods com.example.WarmUp.MainActivity 类名 -内存漫游类中的所有方法</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/2.2.png" alt="2.2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method 类名.方法名 --dump-args --dump-return --dump-backtrace</span><br><span class="line">//android hooking watch class_method com.example.WarmUp.MainActivity.validateF</span><br><span class="line">lag --dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><p><img src="/frida1/2.3.png" alt="2.3"></p><h3 id="开始正题"><a href="#开始正题" class="headerlink" title="开始正题"></a>开始正题</h3><p>所实话，感觉有点像java层模拟执行</p><p>有个问题，就是你会发现他搜不到这个RC4类，可以给大家看一下我之前的内存寻找结果</p><p><img src="/2024/12/01/frida1/2.5.png" alt="2.5"></p><p>所以，我们得多点几下check,让他抓到，再人为搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.example.WarmUp on (google: 10) [usb] # android hooking search classes RC4</span><br><span class="line">Note that Java classes are only loaded when they are used, so if the expected class has not been found, it might not have been loaded yet.</span><br><span class="line">com.android.org.bouncycastle.jcajce.provider.symmetric.ARC4</span><br><span class="line">com.android.org.bouncycastle.jcajce.provider.symmetric.ARC4$Mappings</span><br><span class="line">com.example.WarmUp.RC4</span><br></pre></td></tr></table></figure><p>找个hashcode先</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.example.WarmUp on (google: 10) [usb] # android heap search instances com.example.WarmUp.RC4</span><br><span class="line">Class instance enumeration complete for com.example.WarmUp.RC4</span><br><span class="line"> Hashcode  Class                   toString()</span><br><span class="line">---------  ----------------------  ------------------------------</span><br><span class="line">108025448  com.example.WarmUp.RC4  com.example.WarmUp.RC4@6705668</span><br></pre></td></tr></table></figure><p><img src="/2024/12/01/frida1/2.4.png" alt="2.4"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.example.WarmUp on (google: 10) [usb] # android heap evaluate 108025448</span><br><span class="line">(The hashcode at `108025448` will be available as the `clazz` variable.)</span><br><span class="line">console.log(clazz.encrypt(&quot;11111111111111111111111111111111111&quot;, &quot;咪吗学高手&quot;))</span><br><span class="line">JavaScript capture complete. Evaluating...</span><br><span class="line">Handle 108025448 is to class</span><br><span class="line">        com.example.WarmUp.RC4</span><br><span class="line">  7Û&quot;#:0ne%HÎ/,&amp;½|&lt;ºêÓ</span><br></pre></td></tr></table></figure><p>额，没区别啊，…….,感觉得想个办法，最好使用16进制的格式输出</p><p>不过找到了objection其他好玩的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.anquanke.com/post/id/197657</span><br></pre></td></tr></table></figure><p>有个辅助写frida的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking generate simple com.example.WarmUp.RC4</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">    clazz.swap.implementation = function() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz.swap.apply(<span class="built_in">this</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">    clazz.rpga.implementation = function() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz.rpga.apply(<span class="built_in">this</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">    clazz.ksa.implementation = function() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz.ksa.apply(<span class="built_in">this</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Java.perform(function() &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> Java.use(<span class="string">&#x27;com.example.WarmUp.RC4&#x27;</span>);</span><br><span class="line">    clazz.encrypt.implementation = function() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz.encrypt.apply(<span class="built_in">this</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//还行，自己在修改一下</span></span><br></pre></td></tr></table></figure><h1 id="必要的知识掌握"><a href="#必要的知识掌握" class="headerlink" title="必要的知识掌握"></a>必要的知识掌握</h1><p>有个超级好看的文章，建议都去学一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.52pojie.cn/thread-742686-1-1.html</span><br></pre></td></tr></table></figure><p>先加个debuggable再找一下入口函数</p><p><img src="/2024/12/01/frida1/1.3.png" alt="1.3"></p><h1 id="小插件"><a href="#小插件" class="headerlink" title="小插件"></a>小插件</h1><p>可以帮助分析so层的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Pr0214/trace_natives</span><br></pre></td></tr></table></figure><p>大家真可以去下下这个，好有意思的小.py文件</p><h1 id="frida检测绕过"><a href="#frida检测绕过" class="headerlink" title="frida检测绕过"></a>frida检测绕过</h1><p><a href="https://github.com/Ylarod/Florida">GitHub - Ylarod&#x2F;Florida: 基础反检测 frida-server &#x2F; Basic anti-detection frida-server</a></p><p>download</p><p><img src="/2024/12/01/frida1/1.1.png" alt="1.1"></p><p>下载16.5.6这个</p><p><img src="/2024/12/01/frida1/1.2.png" alt="1.2"></p><p>然后用法和frida一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.jjkk.showmaker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/10/hello-world/"/>
      <url>/2024/11/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
